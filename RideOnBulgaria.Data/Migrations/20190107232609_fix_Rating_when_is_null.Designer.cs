// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RideOnBulgaria.Data;

namespace RideOnBulgaria.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190107232609_fix_Rating_when_is_null")]
    partial class fix_Rating_when_is_null
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Cart", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.CartProduct", b =>
                {
                    b.Property<string>("ProductId");

                    b.Property<string>("CartId");

                    b.Property<int>("Quantity");

                    b.HasKey("ProductId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CartProducts");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Comment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("PostedOn");

                    b.Property<int>("Rating");

                    b.Property<string>("RoadId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoadId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.CoverPhotoRoad", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ImageId");

                    b.Property<string>("RoadId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("CoverPhotoRoads");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Image", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateAdded");

                    b.Property<string>("ImageUrl");

                    b.Property<bool>("IsMain");

                    b.Property<string>("Name");

                    b.Property<string>("PublicId");

                    b.Property<string>("RoadId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoadId");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Order", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInformation");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<decimal>("DeliveryPrice");

                    b.Property<DateTime?>("EstimatedDeliveryDate");

                    b.Property<DateTime?>("OrderDate");

                    b.Property<int>("OrderStatus");

                    b.Property<string>("RecipientName");

                    b.Property<string>("RecipientPhoneNumber");

                    b.Property<decimal>("TotalPrice");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.OrderProduct", b =>
                {
                    b.Property<string>("OrderId");

                    b.Property<string>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Product", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo");

                    b.Property<int>("Count");

                    b.Property<string>("Description");

                    b.Property<string>("ImageId");

                    b.Property<bool>("IsHidden");

                    b.Property<string>("Name");

                    b.Property<decimal>("Price");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.ProductImage", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("ProductId");

                    b.Property<string>("PublicId");

                    b.HasKey("Id");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Reply", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentId");

                    b.Property<string>("Content");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("PostedOn");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("UserId");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Road", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AveragePosterRating")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<double>("AverageRating")
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("CoverPhotoId");

                    b.Property<string>("Description");

                    b.Property<string>("EndPoint");

                    b.Property<int>("PleasureRating");

                    b.Property<DateTime>("PostedOn");

                    b.Property<double>("RoadLength");

                    b.Property<string>("RoadName");

                    b.Property<string>("StartingPoint");

                    b.Property<int>("SurfaceRating");

                    b.Property<string>("UserId");

                    b.Property<string>("Video");

                    b.Property<int>("ViewRating");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Roads");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("CartId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique()
                        .HasFilter("[CartId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RideOnBulgaria.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RideOnBulgaria.Models.CartProduct", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.Cart", "Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RideOnBulgaria.Models.Product", "Product")
                        .WithMany("CartProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Comment", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.Road", "Road")
                        .WithMany("Comments")
                        .HasForeignKey("RoadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RideOnBulgaria.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.CoverPhotoRoad", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.Road", "Road")
                        .WithOne("CoverPhoto")
                        .HasForeignKey("RideOnBulgaria.Models.CoverPhotoRoad", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RideOnBulgaria.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Image", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.Road", "Road")
                        .WithMany("Photos")
                        .HasForeignKey("RoadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RideOnBulgaria.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Order", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.OrderProduct", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RideOnBulgaria.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RideOnBulgaria.Models.ProductImage", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.Product", "Product")
                        .WithOne("Image")
                        .HasForeignKey("RideOnBulgaria.Models.ProductImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Reply", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RideOnBulgaria.Models.User", "User")
                        .WithMany("Replies")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.Road", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.User", "User")
                        .WithMany("Roads")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RideOnBulgaria.Models.User", b =>
                {
                    b.HasOne("RideOnBulgaria.Models.Cart", "Cart")
                        .WithOne("User")
                        .HasForeignKey("RideOnBulgaria.Models.User", "CartId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
